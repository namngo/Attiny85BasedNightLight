
Attiny85.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000058e  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000514  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000245  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d1  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00001189  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	10 d0       	rcall	.+32     	; 0x4c <main>
  2c:	1d c0       	rjmp	.+58     	; 0x68 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <read_analog>:
    }    
}

uint16_t read_analog(int ch)
{
    ADCSRA |= (1 << ADEN); // turn on adc
  30:	37 9a       	sbi	0x06, 7	; 6
    
    ch &= 0b00000111;  // AND operation with 7
    ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
  32:	27 b1       	in	r18, 0x07	; 7
  34:	28 7f       	andi	r18, 0xF8	; 248
  36:	87 70       	andi	r24, 0x07	; 7
  38:	99 27       	eor	r25, r25
  3a:	82 2b       	or	r24, r18
  3c:	87 b9       	out	0x07, r24	; 7
    
    // start single convertion
    // write ’1? to ADSC
    ADCSRA |= (1<<ADSC);
  3e:	36 9a       	sbi	0x06, 6	; 6
    
    // wait for conversion to complete
    // ADSC becomes ’0? again
    // till then, run loop continuously
    while(ADCSRA & (1<<ADSC));
  40:	36 99       	sbic	0x06, 6	; 6
  42:	fe cf       	rjmp	.-4      	; 0x40 <__SREG__+0x1>
    
    uint16_t adc = ADC;
  44:	84 b1       	in	r24, 0x04	; 4
  46:	95 b1       	in	r25, 0x05	; 5
    
    // turn off adc
    ADCSRA &= ~(1 << ADEN); // turn on adc
  48:	37 98       	cbi	0x06, 7	; 6
    
    return (adc);
    
}
  4a:	08 95       	ret

0000004c <main>:
#define LED_PORT PB1
#define LDR_PORT PB3

int main(void)
{
    DDRB |= (1 << LED_PORT);
  4c:	b9 9a       	sbi	0x17, 1	; 23

  // 8-bit resolution
  // set ADLAR to 1 to enable the Left-shift result (only bits ADC9..ADC2 are available)
  // then, only reading ADCH is sufficient for 8-bit results (256 values)

  ADCSRA = 
  4e:	87 e0       	ldi	r24, 0x07	; 7
  50:	86 b9       	out	0x06, r24	; 6
    
    initADC();

    while(1)
    {
        uint16_t raw_adc = read_analog(LDR_PORT);   // add lobyte and hibyte
  52:	83 e0       	ldi	r24, 0x03	; 3
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	ec df       	rcall	.-40     	; 0x30 <read_analog>

        if (raw_adc > 512)
  58:	81 30       	cpi	r24, 0x01	; 1
  5a:	92 40       	sbci	r25, 0x02	; 2
  5c:	18 f0       	brcs	.+6      	; 0x64 <main+0x18>
        {
            // ADC input voltage is more than half of the internal 1.1V reference voltage
            PORTB |= (1 << LED_PORT);
  5e:	c1 9a       	sbi	0x18, 1	; 24
            PORTB &= ~(1 << LED_PORT);
  60:	c1 98       	cbi	0x18, 1	; 24
  62:	f7 cf       	rjmp	.-18     	; 0x52 <main+0x6>
        } 
        else 
        {
             PORTB &= ~(1 << LED_PORT);
  64:	c1 98       	cbi	0x18, 1	; 24
  66:	f5 cf       	rjmp	.-22     	; 0x52 <main+0x6>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>
