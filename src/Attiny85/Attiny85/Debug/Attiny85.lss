
Attiny85.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000066b  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000581  00000000  00000000  000008cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000370  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033c  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009b  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	75 c0       	rjmp	.+234    	; 0x104 <__vector_12>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	60 d0       	rcall	.+192    	; 0xfc <main>
  3c:	77 c0       	rjmp	.+238    	; 0x12c <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <read_analog>:
#include <avr/wdt.h>      // Watchdog timer
#include <avr/interrupt.h>      // Watchdog timer

uint16_t read_analog(int ch)
{
     ADCSRA =
  40:	27 e0       	ldi	r18, 0x07	; 7
  42:	26 b9       	out	0x06, r18	; 6
     (1 << ADPS2) |     // set prescaler to 128, bit 2
     (1 << ADPS1) |     // set prescaler to 128, bit 1
     (1 << ADPS0);      // set prescaler to 128, bit 0
     
    ADCSRA |= (1 << ADEN); // turn on adc
  44:	37 9a       	sbi	0x06, 7	; 6
    
    ch &= 0b00000111;  // AND operation with 7
    ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
  46:	27 b1       	in	r18, 0x07	; 7
  48:	28 7f       	andi	r18, 0xF8	; 248
  4a:	87 70       	andi	r24, 0x07	; 7
  4c:	99 27       	eor	r25, r25
  4e:	82 2b       	or	r24, r18
  50:	87 b9       	out	0x07, r24	; 7
    
    // start single convertion
    // write ’1? to ADSC
    ADCSRA |= (1<<ADSC);
  52:	36 9a       	sbi	0x06, 6	; 6
    
    // wait for conversion to complete
    // ADSC becomes ’0? again
    // till then, run loop continuously
    while (ADCSRA & (1<<ADSC));
  54:	36 99       	sbic	0x06, 6	; 6
  56:	fe cf       	rjmp	.-4      	; 0x54 <read_analog+0x14>
    
    uint16_t adc = ADC;
  58:	84 b1       	in	r24, 0x04	; 4
  5a:	95 b1       	in	r25, 0x05	; 5
    
    // turn off adc
    ADCSRA &= ~(1 << ADEN); // turn off adc
  5c:	37 98       	cbi	0x06, 7	; 6
    
    return (adc);
    
}
  5e:	08 95       	ret

00000060 <check_light>:
// > 0 the number of second the led has been on
volatile int led_state = 0; 

void check_light()
{
    cli();
  60:	f8 94       	cli
    if (led_state == 0)
  62:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  66:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  6a:	89 2b       	or	r24, r25
  6c:	81 f4       	brne	.+32     	; 0x8e <check_light+0x2e>
    {
        uint16_t light_value = read_analog(LDR_PORT);
  6e:	83 e0       	ldi	r24, 0x03	; 3
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	e6 df       	rcall	.-52     	; 0x40 <read_analog>
        if (light_value < LightDarkEnought)
  74:	8a 38       	cpi	r24, 0x8A	; 138
  76:	92 40       	sbci	r25, 0x02	; 2
  78:	f8 f4       	brcc	.+62     	; 0xb8 <check_light+0x58>
        {
            int has_movement = PINB & (1 << PIR_PORT);
            if (has_movement)
  7a:	b0 9b       	sbis	0x16, 0	; 22
  7c:	1d c0       	rjmp	.+58     	; 0xb8 <check_light+0x58>
            {
                led_state = 1;
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  86:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
                // turn on the led
                PORTB |= (1 << LED_PORT);
  8a:	c1 9a       	sbi	0x18, 1	; 24
  8c:	15 c0       	rjmp	.+42     	; 0xb8 <check_light+0x58>
            }
        }
    }
    else
    {
        led_state ++;
  8e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  92:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  9c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
        if (led_state > Light_Time_In_Second)
  a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  a8:	89 37       	cpi	r24, 0x79	; 121
  aa:	91 05       	cpc	r25, r1
  ac:	2c f0       	brlt	.+10     	; 0xb8 <check_light+0x58>
        {
            led_state = 0;
  ae:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
            // turn off the led
            PORTB &= ~(1 << LED_PORT);
  b6:	c1 98       	cbi	0x18, 1	; 24
        }
    }
    
    sei();
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <resetWatchdog>:
}

void resetWatchdog ()
{
    // clear various "reset" flags
    MCUSR = 0;
  bc:	14 be       	out	0x34, r1	; 52
    // allow changes, disable reset, clear existing interrupt
    WDTCR = (1 << WDCE) | (1 << WDE) | (1 << WDIF);
  be:	88 e9       	ldi	r24, 0x98	; 152
  c0:	81 bd       	out	0x21, r24	; 33
    // set interrupt mode and an interval (WDE must be changed from 1 to 0 here)
    WDTCR = (1 << WDIE) | (1 << WDP3) | (1 << WDP0);    // set WDIE, and 8 seconds delay
  c2:	81 e6       	ldi	r24, 0x61	; 97
  c4:	81 bd       	out	0x21, r24	; 33
    // pat the dog
    wdt_reset();
  c6:	a8 95       	wdr
  c8:	08 95       	ret

000000ca <setup>:
}  // end of resetWatchdog

void setup()
{
    cli();
  ca:	f8 94       	cli
    resetWatchdog();
  cc:	f7 df       	rcall	.-18     	; 0xbc <resetWatchdog>
    DDRB |= (1 << LED_PORT);
  ce:	b9 9a       	sbi	0x17, 1	; 23
    sei();
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <go_to_sleep>:
}

void go_to_sleep()
{
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  d4:	85 b7       	in	r24, 0x35	; 53
  d6:	87 7e       	andi	r24, 0xE7	; 231
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	85 bf       	out	0x35, r24	; 53
static __inline void
__attribute__ ((__always_inline__))
__power_all_disable()
{
#ifdef __AVR_HAVE_PRR
    PRR |= (uint8_t)(__AVR_HAVE_PRR);
  dc:	80 b5       	in	r24, 0x20	; 32
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	80 bd       	out	0x20, r24	; 32
    power_all_disable();
    resetWatchdog();
  e2:	ec df       	rcall	.-40     	; 0xbc <resetWatchdog>
    sleep_enable();
  e4:	85 b7       	in	r24, 0x35	; 53
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	85 bf       	out	0x35, r24	; 53
    sei(); 
  ea:	78 94       	sei
    sleep_cpu();
  ec:	88 95       	sleep
    sleep_disable();
  ee:	85 b7       	in	r24, 0x35	; 53
  f0:	8f 7d       	andi	r24, 0xDF	; 223
  f2:	85 bf       	out	0x35, r24	; 53
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
  f4:	80 b5       	in	r24, 0x20	; 32
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	80 bd       	out	0x20, r24	; 32
  fa:	08 95       	ret

000000fc <main>:
    power_all_enable();
}

int main(void)
{
    setup();
  fc:	e6 df       	rcall	.-52     	; 0xca <setup>

    while(1)
    {
        check_light();
  fe:	b0 df       	rcall	.-160    	; 0x60 <check_light>
        go_to_sleep();
 100:	e9 df       	rcall	.-46     	; 0xd4 <go_to_sleep>
 102:	fd cf       	rjmp	.-6      	; 0xfe <main+0x2>

00000104 <__vector_12>:
    }
}

ISR( WDT_vect ) {
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	a8 95       	wdr
 116:	81 b5       	in	r24, 0x21	; 33
 118:	88 61       	ori	r24, 0x18	; 24
 11a:	81 bd       	out	0x21, r24	; 33
 11c:	11 bc       	out	0x21, r1	; 33
 11e:	0f be       	out	0x3f, r0	; 63
    /* dummy */
    wdt_disable();
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
