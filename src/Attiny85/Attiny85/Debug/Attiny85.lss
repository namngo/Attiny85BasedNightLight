
Attiny85.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000864  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a6  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000474  00000000  00000000  000011d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000439  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000187  00000000  00000000  00001b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	7c c0       	rjmp	.+248    	; 0x112 <__vector_12>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	8e c0       	rjmp	.+284    	; 0x13a <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a4 36       	cpi	r26, 0x64	; 100
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	67 d0       	rcall	.+206    	; 0x10a <main>
  3c:	a1 c0       	rjmp	.+322    	; 0x180 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <read_analog>:
        usiserial_get_tx_data() >> 1;         // followed by first 7 bits of serial data
    USICR  = (1<<USIOIE)|                     // Enable USI Counter OVF interrupt.
        (0<<USIWM1)|(1<<USIWM0)|              // Select three wire mode to ensure USI written to PB1
        (0<<USICS1)|(1<<USICS0)|(0<<USICLK);  // Select Timer0 Compare match as USI Clock source.
    DDRB  |= (1<<PB1);                        // Configure USI_DO as output.
    USISR = 1<<USIOIF |                       // Clear USI overflow interrupt flag
  40:	27 e0       	ldi	r18, 0x07	; 7
  42:	26 b9       	out	0x06, r18	; 6
  44:	37 9a       	sbi	0x06, 7	; 6
  46:	27 b1       	in	r18, 0x07	; 7
  48:	28 7f       	andi	r18, 0xF8	; 248
  4a:	87 70       	andi	r24, 0x07	; 7
  4c:	99 27       	eor	r25, r25
  4e:	82 2b       	or	r24, r18
  50:	87 b9       	out	0x07, r24	; 7
  52:	36 9a       	sbi	0x06, 6	; 6
  54:	36 99       	sbic	0x06, 6	; 6
  56:	fe cf       	rjmp	.-4      	; 0x54 <read_analog+0x14>
  58:	84 b1       	in	r24, 0x04	; 4
  5a:	95 b1       	in	r25, 0x05	; 5
  5c:	37 98       	cbi	0x06, 7	; 6
  5e:	08 95       	ret

00000060 <check_light>:
  60:	f8 94       	cli
  62:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_state>
  66:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <led_state+0x1>
  6a:	89 2b       	or	r24, r25
  6c:	81 f4       	brne	.+32     	; 0x8e <check_light+0x2e>
  6e:	83 e0       	ldi	r24, 0x03	; 3
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	e6 df       	rcall	.-52     	; 0x40 <read_analog>
  74:	8a 38       	cpi	r24, 0x8A	; 138
  76:	92 40       	sbci	r25, 0x02	; 2
  78:	30 f5       	brcc	.+76     	; 0xc6 <check_light+0x66>
  7a:	b0 9b       	sbis	0x16, 0	; 22
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <check_light+0x66>
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <led_state+0x1>
  86:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <led_state>
  8a:	c1 9a       	sbi	0x18, 1	; 24
  8c:	1c c0       	rjmp	.+56     	; 0xc6 <check_light+0x66>
  8e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_state>
  92:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <led_state+0x1>
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <led_state+0x1>
  9c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <led_state>
  a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_state>
  a4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <led_state+0x1>
  a8:	89 37       	cpi	r24, 0x79	; 121
  aa:	91 05       	cpc	r25, r1
  ac:	0c f0       	brlt	.+2      	; 0xb0 <check_light+0x50>
  ae:	c1 98       	cbi	0x18, 1	; 24
  b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_state>
  b4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <led_state+0x1>
  b8:	87 39       	cpi	r24, 0x97	; 151
  ba:	91 05       	cpc	r25, r1
  bc:	24 f0       	brlt	.+8      	; 0xc6 <check_light+0x66>
  be:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <led_state+0x1>
  c2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <led_state>
  c6:	78 94       	sei
  c8:	08 95       	ret

000000ca <resetWatchdog>:
  ca:	14 be       	out	0x34, r1	; 52
  cc:	88 e9       	ldi	r24, 0x98	; 152
  ce:	81 bd       	out	0x21, r24	; 33
  d0:	84 e6       	ldi	r24, 0x64	; 100
  d2:	81 bd       	out	0x21, r24	; 33
  d4:	a8 95       	wdr
  d6:	08 95       	ret

000000d8 <setup>:
  d8:	f8 94       	cli
  da:	f7 df       	rcall	.-18     	; 0xca <resetWatchdog>
  dc:	b9 9a       	sbi	0x17, 1	; 23
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <go_to_sleep>:
  e2:	85 b7       	in	r24, 0x35	; 53
  e4:	87 7e       	andi	r24, 0xE7	; 231
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	85 bf       	out	0x35, r24	; 53
  ea:	80 b5       	in	r24, 0x20	; 32
  ec:	8f 60       	ori	r24, 0x0F	; 15
  ee:	80 bd       	out	0x20, r24	; 32
  f0:	ec df       	rcall	.-40     	; 0xca <resetWatchdog>
  f2:	85 b7       	in	r24, 0x35	; 53
  f4:	80 62       	ori	r24, 0x20	; 32
  f6:	85 bf       	out	0x35, r24	; 53
  f8:	78 94       	sei
  fa:	88 95       	sleep
  fc:	85 b7       	in	r24, 0x35	; 53
  fe:	8f 7d       	andi	r24, 0xDF	; 223
 100:	85 bf       	out	0x35, r24	; 53
 102:	80 b5       	in	r24, 0x20	; 32
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	80 bd       	out	0x20, r24	; 32
 108:	08 95       	ret

0000010a <main>:
 10a:	e6 df       	rcall	.-52     	; 0xd8 <setup>
 10c:	a9 df       	rcall	.-174    	; 0x60 <check_light>
 10e:	e9 df       	rcall	.-46     	; 0xe2 <go_to_sleep>
 110:	fd cf       	rjmp	.-6      	; 0x10c <main+0x2>

00000112 <__vector_12>:
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	a8 95       	wdr
 124:	81 b5       	in	r24, 0x21	; 33
 126:	88 61       	ori	r24, 0x18	; 24
 128:	81 bd       	out	0x21, r24	; 33
 12a:	11 bc       	out	0x21, r1	; 33
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	8f 91       	pop	r24
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_14>:
        (16 - 8);                             // and set USI counter to count 8 bits
}

// USI overflow interrupt indicates we have sent a buffer
ISR (USI_OVF_vect) {
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
// USISerial send state variable and accessors
enum USISERIAL_SEND_STATE { AVAILABLE, FIRST, SECOND };
static volatile enum USISERIAL_SEND_STATE usiserial_send_state = AVAILABLE;
static inline enum USISERIAL_SEND_STATE usiserial_send_get_state(void)
{
    return usiserial_send_state;
 146:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <usiserial_send_state>
        (16 - 8);                             // and set USI counter to count 8 bits
}

// USI overflow interrupt indicates we have sent a buffer
ISR (USI_OVF_vect) {
    if (usiserial_send_get_state() == FIRST)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	69 f4       	brne	.+26     	; 0x168 <__vector_14+0x2e>
{
    return usiserial_send_state;
}
static inline void usiserial_send_set_state(enum USISERIAL_SEND_STATE state)
{
    usiserial_send_state=state;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usiserial_send_state>

// Transmit data persistent between USI OVF interrupts
static volatile uint8_t usiserial_tx_data;
static inline uint8_t usiserial_get_tx_data(void)
{
    return usiserial_tx_data;
 154:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
// USI overflow interrupt indicates we have sent a buffer
ISR (USI_OVF_vect) {
    if (usiserial_send_get_state() == FIRST)
    {
        usiserial_send_set_state(SECOND);
        USIDR = usiserial_get_tx_data() << 7  // Send last 1 bit of data
 158:	87 95       	ror	r24
 15a:	88 27       	eor	r24, r24
 15c:	87 95       	ror	r24
 15e:	8f 67       	ori	r24, 0x7F	; 127
 160:	8f b9       	out	0x0f, r24	; 15
            | 0x7F;                           // and stop bits (high)
        USISR = 1<<USIOIF |                   // Clear USI overflow interrupt flag
 162:	8e e4       	ldi	r24, 0x4E	; 78
 164:	8e b9       	out	0x0e, r24	; 14
 166:	06 c0       	rjmp	.+12     	; 0x174 <__vector_14+0x3a>
            (16 - (1 + (STOPBITS)));          // Set USI counter to send last data bit and stop bits
    }
    else
    {
        PORTB |= 1 << PB1;                    // Ensure output is high
 168:	c1 9a       	sbi	0x18, 1	; 24
        DDRB  |= (1<<PB1);                    // Configure USI_DO as output.
 16a:	b9 9a       	sbi	0x17, 1	; 23
        USICR = 0;                            // Disable USI.
 16c:	1d b8       	out	0x0d, r1	; 13
        USISR |= 1<<USIOIF;                   // clear interrupt flag
 16e:	76 9a       	sbi	0x0e, 6	; 14
{
    return usiserial_send_state;
}
static inline void usiserial_send_set_state(enum USISERIAL_SEND_STATE state)
{
    usiserial_send_state=state;
 170:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <usiserial_send_state>
        TCNT0 = oldTCNT0;
#endif

        usiserial_send_set_state(AVAILABLE);
    }
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
